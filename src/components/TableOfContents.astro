---
import { type MarkdownHeading } from "astro";

const { headings } = Astro.props;

interface TocHeading {
  depth: number,
  text: string,
  slug: string,
  subheadings: TocHeading[]
}

const toc = buildToc(headings);

function buildToc(headings: MarkdownHeading[]): any {
  const toc: TocHeading[] = [];
  const parentHeadings = new Map();
  if (headings == undefined) { return [] };
  headings.forEach((h: MarkdownHeading) => {
    const heading: TocHeading = { ...h, subheadings: [] as TocHeading[] };
    parentHeadings.set(heading.depth, heading);
    // Change 2 to 1 if your markdown includes your <h1>
    if (heading.depth === 2) {
      toc.push(heading);
    } else {
      parentHeadings.get(heading.depth - 1)?.subheadings.push(heading);
    }
  });
  return toc;
}
---
{ (headings?.length > 0) &&
  <details class="not-prose">
    <summary>On this page</summary>
    <nav class="toc">
      <ul class="pl-4">
        { toc.map((heading: TocHeading) => (
          <li>
            <a href={'#' + heading.slug}>{heading.text}</a>

            {(heading.subheadings.length > 0) && (
            <ul>
              {heading.subheadings.map((subheading: TocHeading) => (
                <Astro.self heading={subheading} />
              ))}
            </ul>
            )}
          </li>
        ))}
      </ul>
    </nav>
  </details>
}
