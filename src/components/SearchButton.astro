---
import { Icon } from "astro-icon/components";

const mock_results = {
  results: [
    {
      url: "#",
      meta: { title: "Dev Mode" },
      excerpt:
        "We are in Dev Mode, pagefind search works only in <mark>production</mark>. These are just some mock results to facilitate development and testing.",
    },
    {
      url: "#",
      meta: { title: "Building for production" },
      excerpt: "The `postbuild` script will <mark>invoke pagefind</mark> to build the index.",
    },
    {
      url: "#",
      meta: { title: "Filler Text" },
      excerpt:
        "<mark>Some filler text to test scrolling</mark>. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?",
    },
  ],
};

let render_mode = import.meta.env.DEV ? "dev" : "prod";
let mock_data = render_mode ? mock_results : null;
---

<button
  id="search_open"
  class="items-center justify-center transition-colors disabled:pointer-events-none disabled:opacity-50"
  ><Icon name="ri:search-line" class="text-2xl" /></button
>
<dialog id="search_dialog">
  <div
    class="fixed left-0 top-0 flex h-screen w-screen justify-center bg-black bg-opacity-40 backdrop-blur-sm"
  >
    <div
      class="my-4 flex w-full flex-col bg-container px-4 py-4 text-text shadow-md sm:max-w-lg sm:rounded-lg"
    >
      <div class="w-full items-center justify-center">
        <button
          id="search_close"
          class="rounded-full text-text hover:bg-secondary-container hover:text-secondary"
          ><Icon name="ri:close-line" class="m-2 inline-block text-2xl" />
        </button>
      </div>

      <!-- search form -->
      <div class="flex items-center justify-between py-2">
        <div class="flex w-full items-center rounded-lg border bg-background">
          <Icon name="ri:search-line" class="inline-block pl-2 text-2xl" />
          <input
            id="search"
            type="search"
            placeholder="Search"
            class="inline-block w-full border-0 bg-transparent focus:ring-0"
            autofocus
          />
        </div>
      </div>

      <div id="search_results" class="w-full flex-grow overflow-auto text-left">
        <p class="px-2">No matches</p>
      </div>
    </div>
  </div>
</dialog>

<script is:inline define:vars={{ mock_data, render_mode }}>
  function render_result(url, title, excerpt) {
    return `
      <div class="hover:bg-accent-container p-4">
        <a href=${url}>
          <h3 class="font-bold">${title}</h3>
          <p>${excerpt}<p/>
        </a>
      </div>
    `;
  }

  let dialog = document.querySelector("#search_dialog");

  document.querySelector("#search_open").addEventListener("click", () => {
    dialog.showModal();
  });

  document.querySelector("#search_close").addEventListener("click", () => {
    dialog.close();
  });

  // open search with slash key
  document.addEventListener("keydown", (e) => {
    if (e.key === "/" && !dialog.open) {
      e.preventDefault();
      dialog.showModal();
    }
  });

  document.querySelector("#search")?.addEventListener("input", async (e) => {
    // only load the pagefind script once
    let search = "";
    if (render_mode !== "dev") {
      if (e.target.dataset.loaded !== "true") {
        e.target.dataset.loaded = "true";
        // load the pagefind script
        window.pagefind = await import("/pagefind/pagefind.js");
      }

      // search the index using the input value
      search = await window.pagefind.search(e.target.value);
    } else {
      console.log("dev mode");
      search = e.target.value !== "" ? mock_data : { results: [] };
    }

    // clear the old results
    if (search.results.length != 0) {
      document.querySelector("#search_results").innerHTML = "";

      // add the new results
      for (const result of search.results) {
        const data = render_mode === "dev" ? result : await result.data();
        document.querySelector("#search_results").innerHTML += render_result(
          data.url,
          data.meta.title,
          data.excerpt,
        );
      }
    } else {
      document.querySelector("#search_results").innerHTML = "<p class='p-2'>No matches</p>";
    }
  });
</script>
